name: Build bundles
on: [push]

jobs:
  Build_win:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}


          # --------------------BEGIN WINDOWS BUILD-----------------------

      #matrix can be referenced throughout workflows

    strategy:
      matrix:
        os: [windows-2019]
        node-version: [8.x]

    steps:
      #This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout
        uses: actions/checkout@v2


      #This action sets by node environment
      - name: Setup node enviroment
        uses: actions/setup-node@v1.1.2
        with:
          node-version: ${{ matrix.node-version }}

    #  #GitHub Actions default shell on Windows runners is changing to PowerShell 10/23
    #   - name: Install Meteor
    #     run: |
    #       choco install meteor -y
    #       echo ::add-path::C:\Users\runneradmin\AppData\Local\.meteor

    
      

      #specify cmd as powershell is default (necessary?)
      # - name: Canius
      #   shell: cmd
      #   run: |
      #     meteor npm install caniuse-lite browserslist
         
      - name: npm install
        shell: cmd
        run: |
          meteor npm install --production

      - name: npm update
        shell: cmd
        run: |
          meteor npm update

      # - name: Set node env 
      #   shell: cmd
      #   run: |
      #     set NODE_OPTIONS=â€“max-old-space-size=8192

      - name: Build
        shell: cmd
        run: |
          set NODE_OPTIONS=--max-old-space-size=8192
          meteor build --directory ../tdarr-${{ matrix.os }} --allow-incompatible-update --server-only


      - name: Pack ${{ matrix.os }}.zip
        run: |
            mkdir .\out
            7z a -r .\out\tdarr-${{ matrix.os }}.zip .\tdarr-${{ matrix.os }}

      - name: Upload tdarr-${{ matrix.os }}.zip
      #This uploads artifacts from your workflow.
        uses: actions/upload-artifact@v1
        with:
          name: tdarr-${{ matrix.os }}
          path: .\out







# --------------------BEGIN macOS/LINUX BUILD-----------------------
  
  # Build_sh:
  #   name: Build ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [macos-10.15, ubuntu-18.04]
  #       node-version: [8.x]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup node enviroment
  #       uses: actions/setup-node@v1.1.2
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - name: Install NPM, Meteor and build
  #       run: |
  #         curl https://install.meteor.com/ | sh
  #         npm install --production
  #         meteor build --server localhost:8265 --directory ../tdarr-${{ matrix.os }}

  #     - name: Clean Linux
  #       if: matrix.os == 'ubuntu-18.04'
  #       run: |
  #           cd ../tdarr-${{ matrix.os }}/bundle/programs/
  #           rm -r \
  #             server/assets/app/HandBrakeCLI.exe \
  #             server/assets/app/fileScanner/ccextractor/ccextractorwin.exe \
  #             server/npm/node_modules/ffprobe-static/bin/win32/ \
  #             server/npm/node_modules/ffprobe-static/bin/darwin/ \
  #             server/npm/node_modules/nodegit/vendor/plink.exe \
  #             server/npm/node_modules/nodegit/vendor/pageant.exe

  #     - name: Clean MacOS
  #       if: matrix.os == 'macos-10.15'
  #       run: |
  #           cd ../tdarr-${{ matrix.os }}/bundle/programs/
  #           rm -r \
  #             server/assets/app/HandBrakeCLI.exe \
  #             server/assets/app/fileScanner/ccextractor/ccextractorwin.exe \
  #             server/npm/node_modules/ffprobe-static/bin/win32/ \
  #             server/npm/node_modules/ffprobe-static/bin/linux/ \
  #             server/npm/node_modules/nodegit/vendor/plink.exe \
  #             server/npm/node_modules/nodegit/vendor/pageant.exe


  #       #-q 'quiet zip, no output to terminal', -r replace files in zip if exist     
  #     - name: Pack ${{ matrix.os }}.zip (sh)
  #       if: matrix.os == 'ubuntu-18.04' || matrix.os == 'macos-10.15'
        
  #       run: |
  #           mkdir ../out
  #           zip -r -q ../out/tdarr-${{ matrix.os }}.zip ../tdarr-${{ matrix.os }}/

  #     - name: Upload tdarr-${{ matrix.os }}.zip
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: tdarr-${{ matrix.os }}
  #         path: ../out



  # Release:
  #   needs: [Build_win, Build_sh] #Must wait for builds to finish
  #   runs-on: ubuntu-18.04
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Get version and changelog
  #       id: meta_gathering
  #       run: |
  #           echo "::set-output name=version::v$(grep "newVersion, setNewVersion" imports/ui/App.jsx | awk -F"[()]" '{print $2}')-Beta"
  #           echo "::set-output name=relname::$(cat latest.txt | head -1)"
  #           echo "::set-output name=changelog::$(tail -n +2 latest.txt)"

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ steps.meta_gathering.outputs.version }}
  #         release_name: ${{ steps.meta_gathering.outputs.relname }}
  #         body: ${{ steps.meta_gathering.outputs.changelog }}
  #         draft: true
  #         prerelease: true

          
  #       #Path to download buil artifact to, which will then be uploaded
  #     - name: Prep artifact download
  #       run: mkdir ../upload
        



  #       #Upload linux
  #     - name: Download Linux artifict
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: tdarr-ubuntu-18.04
  #         path: ../upload

  #     - name: Upload Linux Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ../upload/tdarr-ubuntu-18.04.zip
  #         asset_name: Tdarr-Linux-${{ steps.meta_gathering.outputs.version }}.zip
  #         asset_content_type: application/zip




  #      #Upload macos

  #     - name: Download macOS artifict
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: tdarr-macos-10.15
  #         path: ../upload

  #     - name: Upload macOS Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} 
  #         asset_path: ../upload/tdarr-macos-10.15.zip
  #         asset_name: Tdarr-macOS-${{ steps.meta_gathering.outputs.version }}.zip
  #         asset_content_type: application/zip


  #          #Upload win

  #     - name: Download Windows artifict
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: tdarr-windows-2019
  #         path: ../upload

  #     - name: Upload Windows Asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ../upload/tdarr-windows-2019.zip
  #         asset_name: Tdarr-Windows-${{ steps.meta_gathering.outputs.version }}.zip
  #         asset_content_type: application/zip
